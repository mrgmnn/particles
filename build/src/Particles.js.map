{
  "version": 3,
  "sources": ["../../build/src/Vector2.js", "../../build/src/Circle.js", "../../build/src/Line.js", "../../build/src/Particle.js", "../../build/src/Rectangle.js", "../../build/src/Renderer.js", "../../build/src/QuadTree.js", "../../build/src/Random.js", "../../build/src/Grid.js", "../../build/src/Particles.js"],
  "sourcesContent": ["export default class Vector2 {\n  constructor(x = 0, y = 0) {\n    this.x = x\n    this.y = y\n  }\n  /** Create Vector form another Vector */\n  static fromVector(vector) {\n    return new Vector2(vector.x, vector.y)\n  }\n  /** Create Vector form array */\n  static fromArray(array) {\n    return new Vector2(array[0], array[1])\n  }\n  /** Set the `x` and `y` components of the this Vector to the given `x` and `y` values. */\n  set(x, y = x) {\n    this.x = x\n    this.y = y\n    return this\n  }\n  /** Sets the `x` and `y` values of this object from a given polar coordinate. */\n  setToPolar(azimuth, radius = 1) {\n    this.x = Math.cos(azimuth) * radius\n    this.y = Math.sin(azimuth) * radius\n    return this\n  }\n  /** Check whether this Vector is equal to a given Vector. */\n  equals(v) {\n    return this.x === v.x && this.y === v.y\n  }\n  /** Calculate the angle between this Vector and the positive x-axis, in radians. */\n  angle() {\n    let angle = Math.atan2(this.y, this.x)\n    if (angle < 0) {\n      angle += 2 * Math.PI\n    }\n    return angle\n  }\n  /** Set the angle of this Vector. */\n  setAngle(angle) {\n    return this.setToPolar(angle, this.length())\n  }\n  /** Add a given Vector to this Vector. Addition is component-wise. */\n  add(src) {\n    this.x += src.x\n    this.y += src.y\n    return this\n  }\n  /** Subtract the given Vector from this Vector. Subtraction is component-wise. */\n  subtract(src) {\n    this.x -= src.x\n    this.y -= src.y\n    return this\n  }\n  /** Multiplies this Vector by the given Vector. */\n  multiply(src) {\n    this.x *= src.x\n    this.y *= src.y\n    return this\n  }\n  /** Divides this Vector by the given Vector. */\n  divide(src) {\n    this.x /= src.x\n    this.y /= src.y\n    return this\n  }\n  /** Scale this Vector by the given value. */\n  scale(value) {\n    if (isFinite(value)) {\n      this.x *= value\n      this.y *= value\n    } else {\n      this.x = 0\n      this.y = 0\n    }\n    return this\n  }\n  /** Negate the `x` and `y` components of this Vector. */\n  negate() {\n    this.x = -this.x\n    this.y = -this.y\n    return this\n  }\n  /** Calculate the distance between this Vector and the given Vector. */\n  distance(src) {\n    const dx = src.x - this.x\n    const dy = src.y - this.y\n\n    return Math.sqrt(dx * dx + dy * dy)\n  }\n  /** Calculate the distance between this Vector and the given Vector, squared. */\n  distanceSq(src) {\n    const dx = src.x - this.x\n    const dy = src.y - this.y\n\n    return dx * dx + dy * dy\n  }\n  /** Calculate the length (or magnitude) of this Vector. */\n  length() {\n    const x = this.x\n    const y = this.y\n\n    return Math.sqrt(x * x + y * y)\n  }\n  /** Set the length (or magnitude) of this Vector. */\n  setLength(length) {\n    return this.normalize().scale(length)\n  }\n  /** Calculate the length of this Vector squared. */\n  lengthSq() {\n    const x = this.x\n    const y = this.y\n\n    return x * x + y * y\n  }\n  /** Makes the vector a unit length vector (magnitude of 1) in the same direction. */\n  normalize() {\n    const x = this.x\n    const y = this.y\n    let len = x * x + y * y\n\n    if (len > 0) {\n      len = 1 / Math.sqrt(len)\n\n      this.x = x * len\n      this.y = y * len\n    }\n\n    return this\n  }\n  /** Rotate this Vector to its perpendicular, in the positive direction. */\n  normalizeRightHand() {\n    const x = this.x\n\n    this.x = this.y * -1\n    this.y = x\n\n    return this\n  }\n  /** Rotate this Vector to its perpendicular, in the negative direction. */\n  normalizeLeftHand() {\n    const x = this.x\n\n    this.x = this.y\n    this.y = x * -1\n\n    return this\n  }\n  /** Calculate the dot product of this Vector and the given Vector. */\n  dot(src) {\n    return this.x * src.x + this.y * src.y\n  }\n  /** Calculate the cross product of this Vector and the given Vector. */\n  cross(src) {\n    return this.x * src.y - this.y * src.x\n  }\n  /**Linearly interpolate between this Vector and the given Vector.\n   *\n   * Interpolates this Vector towards the given Vector.\n   * The interpolation percentage, between 0 and 1.\n   */\n  lerp(src, t = 0) {\n    const ax = this.x\n    const ay = this.y\n\n    this.x = ax + t * (src.x - ax)\n    this.y = ay + t * (src.y - ay)\n\n    return this\n  }\n  /** Make this Vector the zero vector (0, 0). */\n  reset() {\n    this.x = 0\n    this.y = 0\n\n    return this\n  }\n  /** Limit the length (or magnitude) of this Vector. */\n  limit(max) {\n    const len = this.length()\n\n    if (len && len > max) {\n      this.scale(max / len)\n    }\n\n    return this\n  }\n  /** Reflect this Vector off a line defined by a normal. */\n  reflect(normal) {\n    normal = Vector2.fromVector(normal).normalize()\n\n    return this.subtract(normal.scale(2 * this.dot(normal)))\n  }\n  /** Reflect this Vector across another. */\n  mirror(axis) {\n    return this.reflect(axis).negate()\n  }\n  /** Rotate this Vector by an angle amount.\n   *\n   * The angle to rotate by, in radians.\n   */\n  rotate(delta) {\n    const cos = Math.cos(delta)\n    const sin = Math.sin(delta)\n\n    return this.set(cos * this.x - sin * this.y, sin * this.x + cos * this.y)\n  }\n\n  toPolar() {\n    return {\n      p: Math.sqrt(this.x * this.x + this.y * this.y),\n      q: Math.atan2(this.y, this.x),\n    }\n  }\n}\n", "import Vector2 from \"./Vector2.js\"\n\nexport default class Circle {\n  constructor(x = 0, y = 0, radius = 0) {\n    this.position = new Vector2(x, y)\n\n    this.radius = radius\n  }\n\n  get center() {\n    return this.position\n  }\n\n  set center(value) {\n    this.position = value\n  }\n\n  get diameter() {\n    return this.radius * 2\n  }\n\n  set diameter(value) {\n    this.radius = value * 0.5\n  }\n\n  get left() {\n    return this.position.x - this.radius\n  }\n\n  set left(value) {\n    this.position.x = value + this.radius\n  }\n\n  get right() {\n    return this.position.x + this.radius\n  }\n\n  set right(value) {\n    this.position.x = value - this.radius\n  }\n\n  get top() {\n    return this.position.y + this.radius\n  }\n\n  set top(value) {\n    this.position.y = value - this.radius\n  }\n\n  get bottom() {\n    return this.position.y - this.radius\n  }\n\n  set bottom(value) {\n    this.position.y = value + this.radius\n  }\n\n  intersectsPoint(point) {\n    return (point.distance(this.position) <= this.radius)\n  }\n}", "import Vector2 from \"./Vector2.js\"\n\nexport default class Line {\n\tconstructor(a = new Vector2(), b = new Vector2()) {\n\t\tthis.a = a\n\t\tthis.b = b\n\t}\n\n\tlength() {\n\t\treturn Math.sqrt((this.b.x - this.a.x) * (this.b.x - this.a.x) + (this.b.y - this.a.y) * (this.b.y - this.a.y))\n\t}\n}", "import Vector2 from './Vector2.js'\n\nexport class Particle {\n  constructor() {\n    this.position = new Vector2()\n\n    this.velocity = new Vector2()\n\n    this.radius = 1\n\n    this.color = `rgba(255,255,255,0.5)`\n\n    this.text = ''\n  }\n\n  update() {\n    this.position.add(this.velocity)\n  }\n}\n\nexport class ParticleManager {\n  constructor() {\n    this.particles = []\n  }\n\n  createParticle() {\n    const newParticle = new Particle()\n    this.particles.push(newParticle)\n    return newParticle\n  }\n}\n", "import Vector2 from \"./Vector2.js\"\n\nexport default class Rectangle {\n\tconstructor(x = 0, y = 0, width = 0, height = 0) {\n\t\tthis.position = new Vector2(x, y)\n\n\t\tthis.size = new Vector2(width, height)\n\t}\n\n\tget left() {\n\t\treturn this.position.x\n\t}\n\n\tset left(value) {\n\t\tif (value >= this.right) {\n\t\t\tthis.size.x = 0\n\t\t} else {\n\t\t\tthis.size.x = this.right - value\n\t\t}\n\n\t\tthis.position.x = value\n\t}\n\n\tget right() {\n\t\treturn this.position.x + this.size.x\n\t}\n\n\tset right(value) {\n\t\tif (value <= this.position.x) {\n\t\t\tthis.size.x = 0\n\t\t} else {\n\t\t\tthis.size.x = value - this.position.x\n\t\t}\n\t}\n\n\tget top() {\n\t\treturn this.position.y\n\t}\n\n\tset top(value) {\n\t\tif (value >= this.bottom) {\n\t\t\tthis.size.y = 0\n\t\t} else {\n\t\t\tthis.size.y = this.bottom - value\n\t\t}\n\n\t\tthis.position.y = value\n\t}\n\n\tget bottom() {\n\t\treturn this.position.y + this.size.y\n\t}\n\n\tset bottom(value) {\n\t\tif (value <= this.position.y) {\n\t\t\tthis.size.y = 0\n\t\t} else {\n\t\t\tthis.size.y = value - this.position.y\n\t\t}\n\t}\n\n\tget center() {\n\t\treturn new Vector2(this.position.x + this.size.x / 2, this.position.y + this.size.y / 2)\n\t}\n\n\tset center({ x, y }) {\n\t\tthis.x = x - this.size.x / 2\n\t\tthis.y = y - this.size.y / 2\n\t}\n\n\tset(x, y, width, height) {\n\t\tthis.position.set(x, y)\n\t\tthis.size.set(width, height)\n\t}\n\n\tcontains(point) {\n\t\treturn (\n\t\t\tpoint.x >= this.left &&\n\t\t\tpoint.x <= this.right &&\n\t\t\tpoint.y >= this.top &&\n\t\t\tpoint.y <= this.bottom\n\t\t)\n\t}\n\n\tintersectsCircle(circle) {\n\t\treturn !(\n\t\t\tcircle.position.x + circle.radius <= this.left &&\n\t\t\tcircle.position.x + circle.radius >= this.right &&\n\t\t\tcircle.position.y + circle.radius <= this.top &&\n\t\t\tcircle.position.y + circle.radius >= this.bottom\n\t\t)\n\t}\n\n\tintersectsRectangle(rectangle) {\n\t\tif (Math.abs(this.position.x - rectangle.position.x) > this.size.x / 2 + rectangle.size.x / 2)\n\t\t\treturn false;\n\t\tif (Math.abs(this.position.y - rectangle.position.y) > this.size.y / 2 + rectangle.size.y / 2)\n\t\t\treturn false;\n\t\treturn true;\n\t}\n}", "import Circle from './Circle.js'\nimport Line from './Line.js'\nimport { Particle } from './Particle.js'\nimport Rectangle from './Rectangle.js'\nimport Vector2 from './Vector2.js'\n\nconst replaceAlpha = (color, alpha) => {\n  const splittedColor = color.replace('rgba(', '').replace(')').split(',')\n  if (splittedColor.lebgth === 3) {\n    return `rgba(${splittedColor.join(',')},${alpha})`\n  }\n  splittedColor[splittedColor.length - 1] = alpha\n  return `rgba(${splittedColor.join(',')})`\n}\n\nexport default class Renderer {\n  constructor(\n    ctx,\n    backgroundColor = '#000',\n    viewportSize = new Vector2(300, 150)\n  ) {\n    this.objectToRender = []\n\n    this.deltas = []\n\n    this.gradient = null\n\n    this.ctx = ctx\n\n    this.debug = false\n\n    this.viewportSize = viewportSize\n\n    this.transparentBackground = true\n\n    this.backgroundColor = backgroundColor\n  }\n\n  render() {\n    this.drawBackground(\n      this.ctx,\n      this.viewportSize,\n      this.transparentBackground,\n      this.gradient\n    )\n\n    const particles = this.objectToRender.filter(\n      (obj) => obj instanceof Particle\n    )\n    const lines = this.objectToRender.filter((obj) => obj instanceof Line)\n    const rectangles = this.objectToRender.filter(\n      (obj) => obj instanceof Rectangle\n    )\n    const circles = this.objectToRender.filter((obj) => obj instanceof Circle)\n\n    this.drawLines(this.ctx, lines)\n    this.drawParticles(this.ctx, particles)\n    // this.drawRectangles(this.ctx, rectangles)\n    this.drawCircles(this.ctx, circles)\n\n    if (this.debug) {\n      this.drawPerformanceGraphic(this.ctx, this.deltas)\n    }\n  }\n\n  drawBackground(\n    ctx,\n    viewportSize,\n    transparentBackground,\n    gradient,\n    dpiMultiplier\n  ) {\n    if (transparentBackground) {\n      ctx.clearRect(0, 0, viewportSize.x, viewportSize.y)\n    } else if (gradient) {\n      ctx.fillStyle = gradient\n      ctx.fillRect(0, 0, viewportSize.x, viewportSize.y)\n    } else {\n      ctx.fillStyle = this.backgroundColor\n      ctx.fillRect(0, 0, viewportSize.x, viewportSize.y)\n    }\n  }\n\n  drawParticles(ctx, particles) {\n    for (const particle of particles) {\n      ctx.fillStyle = particle.color\n      ctx.beginPath()\n      ctx.moveTo(particle.position.x, particle.position.y)\n      ctx.arc(\n        particle.position.x,\n        particle.position.y,\n        particle.radius,\n        0,\n        Math.PI * 2\n      )\n      ctx.fill()\n      ctx.closePath()\n      if (particle.text) {\n        ctx.font = '15px Arial'\n        ctx.fillText(\n          particle.text,\n          particle.position.x + particle.radius + 10,\n          particle.position.y + 6\n        )\n      }\n    }\n  }\n\n  drawLines(ctx, lines) {\n    ctx.lineWidth = 1\n    for (const line of lines) {\n      const gradient = ctx.createLinearGradient(\n        line.a.x,\n        line.a.y,\n        line.b.x,\n        line.b.y\n      )\n      gradient.addColorStop(0, replaceAlpha(line.colorFrom, line.alpha))\n      gradient.addColorStop(1, replaceAlpha(line.colorTo, line.alpha))\n      ctx.strokeStyle = gradient\n      ctx.beginPath()\n      ctx.moveTo(line.a.x, line.a.y)\n      ctx.lineTo(line.b.x, line.b.y)\n      ctx.stroke()\n    }\n  }\n\n  drawRectangles(ctx, rectangles) {\n    ctx.lineWidth = 0.2\n    ctx.strokeStyle = `rgba(255,255,255,1)`\n    ctx.beginPath()\n    for (const rectangle of rectangles) {\n      ctx.rect(\n        rectangle.position.x,\n        rectangle.position.y,\n        rectangle.size.x,\n        rectangle.size.y\n      )\n    }\n    ctx.stroke()\n  }\n\n  drawCircles(ctx, circles) {\n    ctx.lineWidth = 0.2\n    ctx.strokeStyle = `rgba(255,255,255,0.5)`\n    ctx.beginPath()\n    for (const circle of circles) {\n      ctx.moveTo(circle.position.x + circle.radius, circle.position.y)\n      ctx.arc(\n        circle.position.x,\n        circle.position.y,\n        circle.radius,\n        0,\n        Math.PI * 2\n      )\n    }\n    ctx.stroke()\n  }\n\n  drawPerformanceGraphic(ctx, deltas) {\n    const normalize = (val, min, max) => (val - min) / (max - min)\n\n    const raw = deltas.filter((a) => Boolean(a))\n    const min = Math.min(...raw)\n    const max = Math.max(...raw)\n\n    ctx.lineWidth = 1\n    ctx.font = `${16}px monospace`\n    ctx.strokeStyle = `#fff`\n    ctx.fillStyle = `#fff`\n\n    let offsetX = 0\n    const startY = 70\n\n    ctx.beginPath()\n    ctx.moveTo(offsetX, startY - deltas[0])\n    for (const delta of deltas) {\n      const offsetY = startY - 50 * normalize(delta, min, max)\n      ctx.lineTo(offsetX, offsetY)\n      offsetX += 2\n    }\n\n    ctx.moveTo(0, startY)\n    ctx.lineTo(deltas.length * 2, startY)\n    ctx.fillText(min, deltas.length * 2, startY + 4)\n\n    ctx.moveTo(0, startY - 50)\n    ctx.lineTo(deltas.length * 2, startY - 50)\n    ctx.fillText(max, deltas.length * 2, startY - 50 + 4)\n\n    ctx.closePath()\n    ctx.stroke()\n\n    ctx.fillText(`${this.objectToRender.length.toString()} objects`, 0, 15)\n    ctx.fillText(`${deltas[deltas.length - 1]?.toString()} ms`, 150, 15)\n  }\n}\n", "import Rectangle from './Rectangle.js'\n\nexport default class QuadTree {\n  constructor(rectangle, capacity) {\n    this.rectangle = rectangle\n\n    this.capacity = capacity\n\n    this.points = []\n\n    this.divided = false\n\n    this.northEast = null\n\n    this.northWest = null\n\n    this.southEast = null\n\n    this.southWest = null\n  }\n\n  subdivide() {\n    const x = this.rectangle.position.x\n    const y = this.rectangle.position.y\n    const w = this.rectangle.size.x\n    const h = this.rectangle.size.y\n    const capacity = this.capacity\n\n    this.northEast = new QuadTree(new Rectangle(x, y, w / 2, h / 2), capacity)\n    this.northWest = new QuadTree(\n      new Rectangle(x + w / 2, y, w / 2, h / 2),\n      capacity\n    )\n    this.southEast = new QuadTree(\n      new Rectangle(x, y + h / 2, w / 2, h / 2),\n      capacity\n    )\n    this.southWest = new QuadTree(\n      new Rectangle(x + w / 2, y + h / 2, w / 2, h / 2),\n      capacity\n    )\n    this.divided = true\n  }\n\n  insert(point) {\n    if (!this.rectangle.contains(point.position)) {\n      return false\n    }\n\n    if (this.points.length < this.capacity) {\n      this.points.push(point)\n\n      return true\n    }\n\n    if (!this.divided) {\n      this.subdivide()\n    }\n\n    return (\n      (this.northEast.insert(point) ||\n        this.northWest.insert(point) ||\n        this.southEast.insert(point) ||\n        this.southWest.insert(point)) ??\n      false\n    )\n  }\n\n  queryCircle(circle) {\n    const result = []\n    const unseenQuadTree = []\n\n    unseenQuadTree.push(this)\n\n    for (let i = 0; i < unseenQuadTree.length; i++) {\n      const quadTree = unseenQuadTree[i]\n\n      if (quadTree.rectangle.intersectsCircle(circle)) {\n        for (const p of quadTree.points) {\n          if (circle.intersectsPoint(p.position)) {\n            result.push(p)\n          }\n        }\n\n        if (quadTree.divided) {\n          unseenQuadTree.push(quadTree.northEast)\n          unseenQuadTree.push(quadTree.northWest)\n          unseenQuadTree.push(quadTree.southEast)\n          unseenQuadTree.push(quadTree.southWest)\n        }\n      }\n    }\n\n    return result\n  }\n\n  getAllRectangles() {\n    const unseenQuadTree = []\n\n    unseenQuadTree.push(this)\n\n    for (let i = 0; i < unseenQuadTree.length; i++) {\n      const quadTree = unseenQuadTree[i]\n\n      if (quadTree.divided) {\n        unseenQuadTree.push(quadTree.northEast)\n        unseenQuadTree.push(quadTree.northWest)\n        unseenQuadTree.push(quadTree.southEast)\n        unseenQuadTree.push(quadTree.southWest)\n      }\n    }\n\n    return unseenQuadTree.map((quadTree) => quadTree.rectangle)\n  }\n\n  clear() {\n    this.points = []\n    this.divided = false\n    this.northEast = null\n    this.northWest = null\n    this.southEast = null\n    this.southWest = null\n  }\n}\n", "export default class Random {\n  /** [a, b) */\n  static intBetween(a, b) {\n    if (!b) {\n      b = a\n      a = 0\n    }\n    return Math.floor(Math.random() * (b - a) + a)\n  }\n  /** [a, b) */\n  static floatBetween(a, b) {\n    if (!b) {\n      b = a\n      a = 0\n    }\n    return Math.random() * (b - a) + a\n  }\n\n  static fromArray(array) {\n    return array[Math.floor(Math.random() * array.length)]\n  }\n\n  static indexFromArray(array) {\n    return Math.floor(Math.random() * array.length)\n  }\n}\n", "import Rectangle from './Rectangle.js'\nimport Vector2 from './Vector2.js'\n\nexport default class Grid {\n  constructor(\n    size = new Vector2(1, 1),\n    boundRectangle = new Rectangle(0, 0, 100, 100)\n  ) {\n    this.rectangles = []\n\n    this.size = size\n\n    this.boundRectangle = boundRectangle\n\n    this.rectWidth = boundRectangle.size.x / size.x\n    this.rectHeight = boundRectangle.size.y / size.y\n\n    this.initReactangles(size, boundRectangle)\n  }\n\n  initReactangles(size) {\n    for (let x = 0; x < size.x; x++) {\n      for (let y = 0; y < size.y; y++) {\n        const rectX = x * this.rectWidth + this.boundRectangle.position.x\n        const rectY = y * this.rectHeight + this.boundRectangle.position.y\n\n        this.rectangles.push(\n          new BoundRectangle(rectX, rectY, this.rectWidth, this.rectHeight)\n        )\n      }\n    }\n  }\n\n  insert(particle) {\n    const x = Math.floor(particle.position.x / this.rectWidth)\n    const y = Math.floor(particle.position.y / this.rectHeight)\n\n    const rectIndex = x * y\n    const foundRect = this.rectangles[rectIndex]\n\n    if (foundRect) {\n      foundRect.particles.push(particle)\n    }\n  }\n\n  getIntersectedRectangles(circle) {\n    const left = Math.floor(circle.left / this.rectWidth)\n    const right = Math.ceil(circle.right / this.rectWidth)\n    const bottom = Math.floor(circle.bottom / this.rectHeight)\n    const top = Math.ceil(circle.top / this.rectHeight)\n\n    const boundRectangle = new BoundRectangle(\n      left * this.rectWidth,\n      top * this.rectHeight,\n      (right - left) * this.rectWidth,\n      (bottom - top) * this.rectHeight\n    )\n\n    for (let x = left; x < right; x++) {\n      for (let y = bottom; y < top; y++) {\n        const foundRect = this.rectangles[x * y]\n        if (foundRect) {\n          boundRectangle.particles = [\n            ...boundRectangle.particles,\n            ...foundRect.particles,\n          ]\n        }\n      }\n    }\n\n    return boundRectangle\n  }\n\n  queryCircle(circle) {\n    const result = []\n\n    const boundRectangle = this.getIntersectedRectangles(circle)\n\n    if (!boundRectangle) {\n      return result\n    }\n\n    for (const particle of boundRectangle.particles) {\n      if (circle.intersectsPoint(particle.position)) {\n        result.push(particle)\n      }\n    }\n\n    return result\n  }\n\n  clear() {\n    for (const rect of this.rectangles) {\n      rect.particles = []\n    }\n  }\n}\n\nexport class BoundRectangle extends Rectangle {\n  constructor(x, y, width, height, particles = []) {\n    super(x, y, width, height)\n\n    this.particles = particles\n  }\n}\n", "import Renderer from './Renderer.js'\nimport { ParticleManager } from './Particle.js'\nimport Vector2 from './Vector2.js'\nimport Rectangle from './Rectangle.js'\nimport Line from './Line.js'\nimport QuadTree from './QuadTree.js'\nimport Circle from './Circle.js'\nimport Random from './Random.js'\nimport Grid from './Grid.js'\n\nexport { Random, Vector2 }\n\nexport default class Particles {\n  constructor(canvas, options = {}) {\n    this.canvas = canvas\n\n    this.ctx = this.canvas.getContext('2d')\n\n    this.particleManager = null\n\n    this.renderer = null\n\n    this.boundUpdate = this.update.bind(this)\n\n    this.isRunning = false\n\n    this.ticks = 0\n\n    this.deltas = new Array(150)\n\n    this.debug = false\n\n    this.boundary = null\n\n    this.spatialGrid = null\n\n    this.settings = null\n\n    /** 'default' | 'quadTree' | 'grid' */\n    this.method = 'grid'\n\n    this.drawGrid = false\n  }\n\n  init(settings) {\n    this.settings = settings\n\n    this.particleManager = new ParticleManager()\n\n    for (let a = 0; a < settings.particles.amount; a++) {\n      const particle = this.particleManager.createParticle()\n\n      particle.position.set(\n        Random.intBetween(\n          -settings.particles.distanceToLink,\n          settings.renderer.width + settings.particles.distanceToLink\n        ),\n        Random.intBetween(\n          -settings.particles.distanceToLink,\n          settings.renderer.height + settings.particles.distanceToLink\n        )\n      )\n\n      const velocity = new Vector2()\n      velocity.set(\n        Random.floatBetween(\n          -settings.particles.maxVelocity,\n          settings.particles.maxVelocity\n        ),\n        Random.floatBetween(\n          -settings.particles.maxVelocity,\n          settings.particles.maxVelocity\n        )\n      )\n\n      particle.velocity = velocity\n      particle.color =\n        this.settings?.particles?.color || `rgba(255,255,255,0.5)`\n      particle.text = 'test'\n      particle.radius = Random.floatBetween(1, settings.particles.maxRadius)\n    }\n\n    this.renderer = new Renderer(\n      this.ctx,\n      settings.renderer.backgroundColor,\n      new Vector2()\n    )\n\n    this.renderer.transparentBackground =\n      settings.renderer.transparentBackground\n\n    this.setSize(settings.renderer.width, settings.renderer.height)\n\n    this.changeSpatialGridTo(this.method, this.drawGrid)\n\n    if (settings.renderer.linearGradient) {\n      const gradient = this.ctx.createLinearGradient(\n        settings.renderer.width * settings.renderer.linearGradient.x1,\n        settings.renderer.height * settings.renderer.linearGradient.y1,\n        settings.renderer.width * settings.renderer.linearGradient.x2,\n        settings.renderer.height * settings.renderer.linearGradient.y2\n      )\n      gradient.addColorStop(0, settings.renderer.linearGradient.color1)\n      gradient.addColorStop(1, settings.renderer.linearGradient.color2)\n      this.renderer.gradient = gradient\n    }\n\n    this.renderer.debug = settings.debug\n\n    return this\n  }\n\n  start() {\n    this.isRunning = true\n    window.requestAnimationFrame(this.boundUpdate)\n\n    console.info('Spark Particles started!')\n    return this\n  }\n\n  stop() {\n    this.isRunning = false\n    return this\n  }\n\n  update() {\n    const startTime = Date.now()\n\n    const particles = this.particleManager.particles\n    const distanceToLink = this.settings.particles.distanceToLink\n\n    switch (this.method) {\n      case 'quadTree':\n      case 'grid':\n        this.spatialGrid.clear()\n        break\n      default:\n        break\n    }\n\n    for (const particle of particles) {\n      particle.update()\n\n      this.checkBoundary(particle, this.boundary)\n\n      switch (this.method) {\n        case 'quadTree':\n        case 'grid':\n          this.spatialGrid.insert(particle)\n          break\n        default:\n          break\n      }\n    }\n\n    let lines = []\n    if (this.settings.particles.linkedParticles) {\n      lines = this.linkParticles(particles, distanceToLink)\n    }\n\n    const objectToRender = this.spatialGrid\n      ? [...particles, ...lines, ...this.spatialGrid.rectangles]\n      : [...particles, ...lines]\n    this.renderer.objectToRender = objectToRender\n    this.renderer.deltas = this.deltas\n    this.renderer.render()\n\n    if (this.isRunning) {\n      window.requestAnimationFrame(this.boundUpdate)\n    }\n\n    this.ticks++\n\n    const endTime = Date.now()\n    const delta = endTime - startTime\n    this.deltas.push(delta)\n    this.deltas.shift()\n\n    return this\n  }\n\n  linkParticles(particles, distanceToLink) {\n    let lines = []\n\n    switch (this.method) {\n      case 'quadTree': {\n        const seenParticles = []\n        for (const particleA of particles) {\n          const boundCircle = new Circle(\n            particleA.position.x,\n            particleA.position.y,\n            distanceToLink\n          )\n\n          const inBoundParticles = this.spatialGrid.queryCircle(boundCircle)\n\n          seenParticles.push(particleA)\n\n          for (const particleB of inBoundParticles) {\n            if (seenParticles.find((value) => value === particleB)) {\n              continue\n            }\n\n            const distance = particleA.position.distance(particleB.position)\n            const line = new Line(\n              Vector2.fromVector(particleA.position),\n              Vector2.fromVector(particleB.position)\n            )\n            const alpha = 1 - distance / distanceToLink\n            line.alpha = alpha\n            lines.push(line)\n          }\n        }\n        break\n      }\n      case 'grid': {\n        for (const particle of particles) {\n          const pointA = particle.position\n          const colorA = particle.color\n\n          const boundCircle = new Circle(\n            particle.position.x,\n            particle.position.y,\n            distanceToLink\n          )\n\n          const inBoundPoints = this.spatialGrid\n            .queryCircle(boundCircle)\n            .map((a) => ({ ...a.position, color: a.color }))\n\n          for (const pointB of inBoundPoints) {\n            if (pointA === pointB) {\n              continue\n            }\n\n            const distance = pointA.distance(pointB)\n            const line = new Line(\n              Vector2.fromVector(pointA),\n              Vector2.fromVector(pointB)\n            )\n            const alpha = 1 - distance / distanceToLink\n            line.alpha = alpha\n            line.colorFrom = colorA\n            line.colorTo = pointB.color\n            lines.push(line)\n          }\n        }\n\n        const filtredLines = []\n        for (let i = 0; i < lines.length - 1; i++) {\n          const lineA = lines[i]\n          let isAdd = true\n          for (let j = i + 1; j < lines.length; j++) {\n            const lineB = lines[j]\n            if (lineA.a.equals(lineB.b) && lineA.b.equals(lineB.a)) {\n              isAdd = false\n            }\n          }\n          if (isAdd) {\n            filtredLines.push(lineA)\n          }\n        }\n        if (lines.length) filtredLines.push(lines[lines.length - 1])\n        lines = filtredLines\n        break\n      }\n      default: {\n        for (let a = 0; a < particles.length - 1; a++) {\n          for (let b = a + 1; b < particles.length; b++) {\n            const distance = particles[a].position.distance(\n              particles[b].position\n            )\n            if (distance < distanceToLink) {\n              const line = new Line(\n                Vector2.fromVector(particles[a].position),\n                Vector2.fromVector(particles[b].position)\n              )\n              const alpha = 1 - distance / distanceToLink\n              line.alpha = alpha\n              lines.push(line)\n            }\n          }\n        }\n        break\n      }\n    }\n\n    return lines\n  }\n\n  oneFrame = this.update\n\n  setSize(width, height) {\n    this.canvas.style.width = width.toString() + 'px'\n    this.canvas.style.height = height.toString() + 'px'\n\n    this.canvas.width = width\n    this.canvas.height = height\n\n    this.renderer.viewportSize = new Vector2(width, height)\n\n    this.boundary = new Rectangle(\n      -this.settings.particles.distanceToLink,\n      -this.settings.particles.distanceToLink,\n      width + this.settings.particles.distanceToLink * 2,\n      height + this.settings.particles.distanceToLink * 2\n    )\n\n    return this\n  }\n\n  checkBoundary(particle, boundary) {\n    if (particle.position.x < boundary.left) {\n      particle.position.x = boundary.right\n      return\n    }\n\n    if (particle.position.x > boundary.right) {\n      particle.position.x = boundary.left\n      return\n    }\n\n    if (particle.position.y < boundary.top) {\n      particle.position.y = boundary.bottom\n      return\n    }\n\n    if (particle.position.y > boundary.bottom) {\n      particle.position.y = boundary.top\n    }\n  }\n\n  changeSpatialGridTo(gridName) {\n    this.method = gridName\n\n    switch (gridName) {\n      case 'grid': {\n        const gridCellsX = Math.floor(\n          this.boundary.size.x / this.settings.particles.distanceToLink / 2.5\n        )\n        const gridCellsY = Math.floor(\n          this.boundary.size.y / this.settings.particles.distanceToLink / 2.5\n        )\n        this.spatialGrid = new Grid(\n          new Vector2(gridCellsX, gridCellsY),\n          this.boundary\n        )\n        break\n      }\n      case 'quadTree': {\n        this.quadTree = new QuadTree(this.boundary, 4)\n        break\n      }\n      default: {\n        this.spatialGrid = null\n      }\n    }\n  }\n}\n"],
  "mappings": "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",
  "names": []
}
